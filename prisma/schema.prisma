// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Currency {
    id     String @id @default(cuid())
    name   String
    symbol String
    User   User[]
}

model Expense {
    id          String   @id @default(cuid())
    createdDate DateTime @default(now())
    name        String
    amount      Float
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    Budget      Budget?  @relation(fields: [budgetId], references: [id])
    budgetId    String?

    @@index([budgetId])
    @@index([userId])
}

model Income {
    id          String   @id @default(cuid())
    createdDate DateTime @default(now())
    name        String
    amount      Float
    user        User     @relation(fields: [userId], references: [id])
    userId      String

    @@index(fields: [userId])
}

model Goal {
    id          String   @id @default(cuid())
    createdDate DateTime @default(now())
    dueDate     DateTime
    amount      Float
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique

    @@index([userId])
}

model Budget {
    id          String    @id @default(cuid())
    createdDate DateTime  @default(now())
    dueDate     DateTime
    amount      Float
    expenses    Expense[]
    user        User      @relation(fields: [userId], references: [id])
    userId      String

    @@index([userId])
}

// Necessary for Next auth
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    totalMoney    Float     @default(0)
    currency      Currency? @relation(fields: [currencyId], references: [id])
    currencyId    String?
    Expense       Expense[]
    Income        Income[]
    Budget        Budget[]
    Goal          Goal?
    pro           Boolean   @default(false)

    @@index(fields: [currencyId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
